[{"categories":null,"contents":" From Zero to Hero in 7 hours years (and counting). Tales of DevRel Practitioner.\nAbstract In this talk, Baruch will share his experiences and learning as a DevRel Practitioner with JFrog for the last 7 years. And yes, he\u0026rsquo;ll talk about KPIs and metrics, too.\nTalk description After 7 years in DevRel in JFrog, Baruch knows one thing: in DevRel learning never stops. In this talk, he will talk about what he learned over his career and will share his experience on the most important topics in DevRel: First of all, of course, KPIs and metrics, but also, where (and how) the money comes from, hiring, management (since it\u0026rsquo;s not only self-management now), some other important stuff like too much travel, and last, but not least, KPIs and metrics. But remember, learning never stops! What are the changes we\u0026rsquo;ll learn he\u0026rsquo;s wrong about everything?!\nNotes Notes for the committee (not supposed to be public, but hey, they are public here, so behave.)\nPer Atsushi\u0026rsquo;s request:\n Every audiences want know about more practice methods. So how does JFrog do DevRel, what is important metrics in your company, how to distribute your developer marketing budgets, and how to manage your team?\n ","date":"2019-01-07T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/from-zero-to-hero/","tags":["devrel","abstracts"],"title":"From Zero to Hero"},{"categories":null,"contents":" Abstract In this talk, we’ll talk about the key measurements for the DevOps transformation process and provide you with 3 metrics you can start measuring tomorrow.\nTalk description Devops is usually viewed from a traditional perspective of a collaboration of Dev, Ops, and QA, driven by the change in Culture, People, and Process. But how do you know where you stand and where to move? As in almost any field, data and metrics give you the gauges and instruments. In this talk, we’ll talk about the key measurements for the DevOps transformation process and provide you with 3 metrics you can start measuring tomorrow.\nNotes That’s a practical talk that brings numbers, measures and KPIs into DevOps.\n","date":"2019-01-01T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/datadrivendevops/","tags":["abstracts"],"title":"#DataDrivenDevOps"},{"categories":null,"contents":" Abstract We asked the Fortune 500 software delivery leaders what holds them back. This talk is the analysis of their insights on what bottlenecks they encountered in their DevOps journey.\nTalk We asked a Fortune 500 software delivery leaders what holds them back. This talk is the analysis of their insights on what bottlenecks they encountered in their DevOps journey. We share discoveries on what helped them to overcome the bottlenecks and how they plan to deliver even faster. Using this we define some unifying themes on what areas provide the greatest return in investments of time and resources.\nNotes JFrog has a portfolio of more than 4K customers, with 8 out of 10 biggest software vendors, 8 out of 10 biggest telecom companies, and 7 out of 10 financial and retail companies, so we have a very good target audience for such a study. Some facts that we discovered during this study are real eye openers.\n","date":"2019-01-01T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/a-research-study-into-devops-bottlenecks/","tags":["abstracts"],"title":"A Research Study into DevOps bottlenecks"},{"categories":null,"contents":" Abstract In many talks, you hear how everything is DevOps unicorns and rainbows, and you feel like you’re the last person on earth with “suboptimal” processes, tools and environment. But no despair, DevOps talks are like Instagram, hаve nothing to do with the real life. In this talk, we’ll reveal the truth.\nTalk description In many DevOps talks, you see a speaker from a renowned tech company stand up and describe a perfect utopia of an environment. You look at the perfect environment and dedicated hordes of senior engineers they describe, and you despair of ever getting to that point. Your environment looks nothing like that.\nSurprise– their environment doesn’t really look like that either! In this talk, a speaker from an unnamed tech unicorn describes their amazing environment– and then what they just said gets translated from “thought leader” into plain English for you by an official translator. Stop feeling sad– everything is secretly terrible!\nNotes That’s a pair talk: the first part is pure fun: thought leadership speaker and his real-world translator. In the second part, we are going into the details of how to evaluate technology (hype or the real deal?) and how to know whether your team is ready to adopt it?\n","date":"2019-01-01T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/devops-theory-vs.-practice-a-song-of-ice-and-tirefire/","tags":["abstracts"],"title":"DevOps Theory vs. Practice: A Song of Ice and TireFire"},{"categories":null,"contents":" Abstract In many DevOps talks, you see a speaker from the most amazing companies stand up and describe the perfect world of DevOps. Your environment looks nothing like that and with the digital transformation that companies are undertaking these days (and the awesome buzzwords that accompany it) you feel you\u0026rsquo;re getting behind even further. Fear not, DevOps in the Cloud is possible for everyone and we\u0026rsquo;ll demonstrate that with live examples.\nTalk description DevOps has been around for quite a while, though the understanding that it\u0026rsquo;s not just a tool but a mindset seems to still be missing at companies. With the rise of Cloud, and especially Cloud-Native, a second massive change in mindset is taking place as we\u0026rsquo;re all figuring out how we move to the cloud in the best possible way. DevOps in the cloud is a story of three S\u0026rsquo;s:\n Serverless: By no means does serverless mean we\u0026rsquo;re moving to a world where Ops isn\u0026rsquo;t needed. In fact, I think that the specialty of Ops is even more important in a serverless world where there is no \u0026ldquo;server\u0026rdquo; you can debug; Secure: One of the latest additions to the DevOps family has been DevSecOps and that makes total sense. Over the past several months we\u0026rsquo;ve seen massive data breaches so knowing what you\u0026rsquo;re deploying and how you\u0026rsquo;re deploying is a matter of life and death for companies; Speed: How often does \u0026ldquo;the Business\u0026rdquo; say that a new feature can wait a few weeks to a new deployment cycle? What if your patch needs to go in production in the next few hours so fix a massive bug? Speed is becoming, if it wasn\u0026rsquo;t already, a critical factor in how we deploy apps and what processes we follow.  In this session we\u0026rsquo;ll touch on all three elements as we\u0026rsquo;re walking through a live example, deploying apps in a speedy, secure, and serverless manner.\nNotes A surprising amount of people think that with the rise of serverless we don\u0026rsquo;t need any ops (NoOps) or that it only means running functions (FaaS). As developers we tend to treat security as a second-class citizen (together with documentation, and yes I did that too..), but with the many security breaches we\u0026rsquo;ve seen it\u0026rsquo;s clear we can no longer do that.\n","date":"2019-01-01T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/devops-in-the-cloud-a-story-of-three-ss/","tags":["abstracts"],"title":"DevOps in the Cloud: A Story of Three S's"},{"categories":null,"contents":" Abstract Package managers are hard. Helm learned a lot of lessons from others’ mistakes, but also repeated some. In this talk, we’ll discuss those mistakes and explore several solutions, their strengths, and their weaknesses.\nTalk description Package managers are hard. Helm learned a lot of lessons from others’ mistakes, but also repeated some. For example, having a single index file per repository is not scalable. It’s the same mistake that NPM made and it causes slower CI, high memory consumption, slower searches, and more. Another example is not having private enterprise repositories in mind, leaving out authorization and authentication features. In this talk, we’ll explore several solutions to those problems, their strengths, and their weaknesses.\nNotes  Webinar on the topic Blog post on the topic  ","date":"2019-01-01T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/hey-helm-can-you-scale/","tags":["abstracts"],"title":"Hey, Helm, can you scale?"},{"categories":null,"contents":" Abstract Grafeas is an open source metadata effort, which allows metadata exchange between different tools to enable smarter decisions and easier control. In this talk, we’ll show you how by utilizing the metadata during the deployment pipeline, you can create more secure and trusted releases.\nTalk description With the proliferation of binaries to software production and delivery (think beyond dependency artifacts like JARs, but also include VM and container images, microservices systems as a whole, IoT deployments) artifacts metadata becomes critical for decisions of what should be deployed where and investigation of deployed services. But comprehensive metadata is hard to obtain because of the existing stovepipes. Every tool that emits and consumes metadata in their own limited scope and in their own custom format. Those stovepipes hurt everyone and Grafeas is here to change that. Grafeas is an open source metadata effort, with a community sponsored by Google, JFrog, and others. Its intention is to allow metadata exchange between different tools to enable smarter decisions and easier control. In this talk, we’ll show you how to pull artifact metadata, such as vulnerabilities, licenses, etc, from the public and private sources. Then we’ll share the metadata with different tools using Grafeas. By using Grafeas API, we can, utilize the metadata during the deployment pipeline, for example, make sure image promotions are gated by known CVEs. Ultimately, you can create more secure and trusted releases.\nNotes This is a joint talk with a speaker a speaker from Google (probably with the Grafeas project lead) about the new OSS initiative.\n","date":"2019-01-01T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/one-metadata-to-rule-them-all-open-approach-to-artifact-metadata-for-faster-more-stable-and-more-trusted-releases/","tags":["abstracts"],"title":"One metadata to rule them all - open approach to artifact metadata for faster, more stable and more trusted releases"},{"categories":null,"contents":" Abstract Tis impossible to be sure of anything but Death and Taxes\u0026hellip; Or dependencies in software! Let\u0026rsquo;s face it, package managers were invented in hell to make us all miserable. Luckily, though, Go Modules suck less. In this talk, we’ll go over “the seven deadly sins” of package management and why Go Modules has absolutely learned from those experiences.\nTalk description Most of the package managers in the world are less than optimal (and that might be an understatement). That doesn\u0026rsquo;t mean that the authors who created them are stupid or didn’t know what they are doing, though. Surprisingly, package management is about people, not technology, and people are weird, unpredictable and hard to work with (let\u0026rsquo;s be honest and agree we are all a little difficult).\nWe’ll discuss \u0026ldquo;the seven deadly sins\u0026rdquo; of package management, and how the existing package managers suffer from them; And then we’ll talk about how Go Modules learned from the industry experience and delivered what looks like a huge step forward for Go (and the benefits over previous solutions).\n","date":"2019-01-01T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/package-managers-are-evil-but-go-modules-suck-less/","tags":["abstracts"],"title":"Package Managers Are Evil, But Go Modules Suck Less"},{"categories":null,"contents":" Abstract Most of the package managers in the world suck. In this talk, we’ll present “the seven deadly sins” of package management and review the pros and cons of the most popular ones, including ones you\u0026rsquo;re using today. Then we\u0026rsquo;ll talk about what can be done.\nTalk description Most of the package managers in the world suck. Not because their authors are stupid or didn’t know what they are doing, but because surprisingly, package management is about people, not technology, and people are weird, unpredictable and hard to work with.\nIn this talk we’ll discuss why realizing a transitive dependencies directed acyclic graph, although a requirement, is not enough for a great package manager; We’ll present “the seven deadly sins” of package management, and how the existing package managers suffer from them; Then we\u0026rsquo;ll talk about what can be done and some examples of package managers which suck less than others.\nNotes Most of the people don\u0026rsquo;t realize how complicated the domain and how awful the state of affairs is. Let\u0026rsquo;s talk about what\u0026rsquo;s wrong, why and what can be done.\n","date":"2019-01-01T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/seven-deadly-sins-of-dependency-management/","tags":["abstracts"],"title":"Seven Deadly Sins of Dependency Management"},{"categories":null,"contents":" Abstract Making chocolate and writing software have a lot more in common than you might think. In both cases you need to have the right ingredients, you need to trust your suppliers and have transparency in your production process. In this talk, we\u0026rsquo;ll look at how you can (and should) know what is in the app you deploy.\nTalk description Building software is like a box of chocolates, you never know what you\u0026rsquo;re gonna get. That is obviously a big challenge as it\u0026rsquo;s more important than ever to know what you\u0026rsquo;re putting in your app in terms of code and licenses. If you\u0026rsquo;re deploying it to a Kubernetes cluster it gets even more challenging, and important, because the container you\u0026rsquo;re running your app in now plays a role too. Let\u0026rsquo;s look at building software in the same way as assembling a box of chocolates. To make the best chocolates, you don\u0026rsquo;t only need the best ingredients (dependencies), you also need to trust your suppliers (vulnerabilities, licenses). As you\u0026rsquo;re putting your box together (pipeline) you want full transparency in what makes it to your consumers. During the session we’ll look at:\n Building an app and looking at it\u0026rsquo;s dependencies Validating the licenses and looking at vulnerabilities Knowing what is in your cluster and taking action  Notes This is a talk about general approaches and best practices of software development, not a product pitch 😄\n","date":"2019-01-01T00:00:00Z","permalink":"http://engineering.jfrog.com/2019/01/trusting-your-ingredients-knowing-what-makes-up-your-app/","tags":["abstracts"],"title":"Trusting Your Ingredients - Knowing What Makes Up Your App"},{"categories":null,"contents":" Breaking free from vendoring chains (Photo by Pixabay)\n  Go 1.11 introduced support for Go Modules and with it the ability to do proper dependency management. As the Go community moves towards the adoption of modules more and more, the question is “_why not stick with vendoring?_”\n Source control: Source control is meant to control source code (the name kind of implied that 😇) and not your dependencies; Versioning: The app you create has a version and the dependency you rely on has one too, with vendoring it’s impossible to know which version of the dependency you have; Repository size: If you store more data, your repositories will grow as well and those vendor folders can be huge. Also when you commit files their history will remain even if you delete them later on; Local dependencies: With anything except the use of modules you cannot replace an existing dependency with a local dependency to test, for example, a new version; Build time: Larger repos will take more time to clone and build, making it more time-consuming to push your latest update to production; Repeatable builds: Without modules I can build my source against version 1.2 of a dependency and the next morning someone else in my team might build using version 1.3; Immutable builds: If you depend on other software, you need that to be immutable and not changed by a developer that decides to experiment a little; Project management: PRs for the project will list all changes in the vendor tree, making it difficult to perform proper validation of code.  So, why use Go modules and not use vendoring? Because you want to do dependency management in Go the right way!\n","date":"2018-12-19T00:00:00Z","permalink":"http://engineering.jfrog.com/2018/12/golang-dependency-management-doing-it-right/","tags":["golang"],"title":"Golang Dependency Management — Doing it Right!"},{"categories":null,"contents":" This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ` [outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] \\`\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ` ... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... \\`\nEdit fuse.js options to Search static/js/search.js ` keys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ] \\`\n","date":null,"permalink":"http://engineering.jfrog.com/search/","tags":null,"title":"Search Results"}]